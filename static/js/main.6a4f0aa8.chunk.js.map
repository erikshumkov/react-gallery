{"version":3,"sources":["config.js","Components/Form.js","Components/Navigation.js","Components/Header.js","Components/Image.js","Components/NotFound.js","Components/List.js","Components/Gallery.js","Components/Search.js","Components/NotAvailable.js","Components/Container.js","Components/App.js","serviceWorker.js","index.js"],"names":["apiKey","key","secret","Form","state","formText","onTextUpdate","e","_this","setState","target","value","pulseEffect","button","document","querySelector","classList","add","setTimeout","remove","_this2","this","react_default","a","createElement","className","onSubmit","props","formSubmit","history","tags","type","name","ref","input","placeholder","autoComplete","onChange","onClick","fill","height","viewBox","width","xmlns","d","Component","withRouter","NavLink","to","handleClick","Header","Components_Form","Components_Navigation","Image","src","url","alt","title","href","rel","NotFound","List","images","apiData","data","length","map","img","Components_Image","concat","farm","server","id","Components_NotFound","Gallery","style","display","Components_List","Search","Components_Gallery","tag","NotAvailable","Container","HashRouter","basename","Components_Header","loader","Switch","Route","exact","path","render","_ref","match","Components_Search","search","params","component","App","hist","handleSearch","arguments","undefined","axios","get","then","response","photos","photo","catch","error","console","log","histData","preventDefault","push","currentTarget","reset","innerHTML","window","location","searchTag","split","pop","word","filter","indexOf","includes","prevProps","prevState","Components_Container","Boolean","hostname","ReactDOM","Components_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oPAKeA,EALA,CACbC,IAAK,mCACLC,OAAQ,oDCEJC,6MAEJC,MAAQ,CACNC,SAAU,MAIZC,aAAe,SAAAC,GACbC,EAAKC,SAAS,CAAEJ,SAAUE,EAAEG,OAAOC,WAIrCC,YAAc,WACZ,IAAMC,EAASC,SAASC,cAAc,kBACtCF,EAAOG,UAAUC,IAAI,SACrBC,WAAW,WAAQL,EAAOG,UAAUG,OAAO,UAAa,8EAIjD,IAAAC,EAAAC,KACP,OACEC,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cACPC,SAAU,SAAAnB,GAAC,OAAIa,EAAKO,MAAMC,WAAWrB,EAAGa,EAAKO,MAAME,QAAST,EAAKU,KAAKnB,SAC7EW,EAAAC,EAAAC,cAAA,SAAOO,KAAK,SACLC,KAAK,SACLC,IAAK,SAACC,GAAD,OAAWd,EAAKU,KAAOI,GAC5BC,YAAY,SACZC,aAAa,MACbC,SAAUhB,KAAKf,eACtBgB,EAAAC,EAAAC,cAAA,UAAQO,KAAK,SAASN,UAAU,gBAAgBa,QAASjB,KAAKT,aAG5DU,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QAAQc,KAAK,UAAUC,OAAO,KAAKC,QAAQ,YAAYC,MAAM,KAAKC,MAAM,8BACrFrB,EAAAC,EAAAC,cAAA,QAAMoB,EAAE,+OACRtB,EAAAC,EAAAC,cAAA,QAAMoB,EAAE,gBAAgBL,KAAK,mBAlCtBM,aA2CJC,cAAW3C,WC/BX2C,cAbI,SAACnB,GAEhB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAStB,UAAU,MAAMuB,GAAG,cAAcV,QAAS,SAAC/B,GAAD,OAAOoB,EAAMsB,YAAY1C,KAA5E,eACJe,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAStB,UAAU,MAAMuB,GAAG,WAAWV,QAAS,SAAC/B,GAAD,OAAOoB,EAAMsB,YAAY1C,KAAzE,YACJe,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAACuB,EAAA,EAAD,CAAStB,UAAU,MAAMuB,GAAG,aAAaV,QAAS,SAAC/B,GAAD,OAAOoB,EAAMsB,YAAY1C,KAA3E,kBCOC2C,EAZA,SAACvB,GACd,OACEL,EAAAC,EAAAC,cAAA,cAEEF,EAAAC,EAAAC,cAAC2B,EAAD,CAAMvB,WAAYD,EAAMC,aAExBN,EAAAC,EAAAC,cAAC4B,EAAD,CAAYH,YAAatB,EAAMsB,gBCGtBI,EAZD,SAAC1B,GACb,OACEL,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,OAAK8B,IAAK3B,EAAM4B,IAAKC,IAAK7B,EAAM8B,QAChCnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,eACbH,EAAAC,EAAAC,cAAA,SAAIG,EAAM8B,OACVnC,EAAAC,EAAAC,cAAA,KAAGkC,KAAM/B,EAAM4B,IAAK7C,OAAO,SAASiD,IAAI,sBAAsBlC,UAAU,UAASH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,oBCOvFmC,EAbE,SAACjC,GAChB,OACEL,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,8BAGAF,EAAAC,EAAAC,cAAA,0GCoBSqC,EAxBF,SAAClC,GAGZ,IACImC,EADEC,EAAUpC,EAAMqC,KActB,OAVEF,EADEC,EAAQE,OAAS,EACVF,EAAQG,IAAK,SAAAC,GAAG,OACvB7C,EAAAC,EAAAC,cAAC4C,EAAD,CAAOb,IAAG,eAAAc,OAAiBF,EAAIG,KAArB,sBAAAD,OAA8CF,EAAII,OAAlD,KAAAF,OAA4DF,EAAIK,GAAhE,KAAAH,OAAsEF,EAAIjE,OAA1E,UACHD,IAAKkE,EAAIK,GACTf,MAAOU,EAAIV,UAIXnC,EAAAC,EAAAC,cAACiD,EAAD,MAITnD,EAAAC,EAAAC,cAAA,UACGsC,ICAQY,EApBC,SAAC/C,GAEf,IAGImC,EAASnC,EAAMqC,KAAKC,OACxB,OACE3C,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBAGD,IAAXqC,EACGxC,EAAAC,EAAAC,cAAA,MAAImD,MARJ,CAAEC,QAAS,SAQajD,EAAM8B,OAC9BnC,EAAAC,EAAAC,cAAA,UAAKG,EAAM8B,OAEfnC,EAAAC,EAAAC,cAACqD,EAAD,CAAMb,KAAMrC,EAAMqC,SCHTc,EAVA,SAACnD,GAEZ,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuD,EAAD,CAASf,KAAMrC,EAAMqC,KAAMP,MAAO9B,EAAMqD,QCIjCC,EAVM,SAACtD,GACpB,OACEL,EAAAC,EAAAC,cAAA,OAAKC,UAAU,8BACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gCACbH,EAAAC,EAAAC,cAAA,gCACAF,EAAAC,EAAAC,cAAA,+DC8CS0D,EA1CG,SAACvD,GAEf,OAEEL,EAAAC,EAAAC,cAAC2D,EAAA,EAAD,CAAYC,SAAS,KACnB9D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aAEbH,EAAAC,EAAAC,cAAC6D,EAAD,CAAQzD,WAAYD,EAAMC,WAClBqB,YAAatB,EAAMsB,cAK1BtB,EAAM2D,OACLhE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAUH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,cAE3BH,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,KAEEjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAMrE,EAAAC,EAAAC,cAACuD,EAAD,CAASf,KAAMrC,EAAMqC,KAAMP,MAAM,kBAErEnC,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOE,KAAK,cAAcC,OAAQ,kBAAMrE,EAAAC,EAAAC,cAACuD,EAAD,CAASf,KAAMrC,EAAMqC,KAAMP,MAAM,kBAEzEnC,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOE,KAAK,WAAWC,OAAQ,kBAAMrE,EAAAC,EAAAC,cAACuD,EAAD,CAASf,KAAMrC,EAAMqC,KAAMP,MAAM,eAEtEnC,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOE,KAAK,aAAaC,OAAQ,kBAAMrE,EAAAC,EAAAC,cAACuD,EAAD,CAASf,KAAMrC,EAAMqC,KAAMP,MAAM,iBAExEnC,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAI,kBAAqBC,OAAQ,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,MAAH,OAC5CvE,EAAAC,EAAAC,cAACsE,EAAD,CACE9B,KAAMrC,EAAMqC,KACZP,MAAO9B,EAAMoE,OACbf,IAAKa,EAAMG,OAAOD,YAGtBzE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOS,UAAWhB,QC+DfiB,6MApGX9F,MAAQ,CACN0D,OAAQ,GACRhC,KAAM,CAAC,aAAc,UAAW,YAAa,IAC7CwD,QAAQ,EACRa,KAAM,KACNJ,OAAQ,QA2CZK,aAAe,WAAyB,IAAxBtE,EAAwBuE,UAAApC,OAAA,QAAAqC,IAAAD,UAAA,GAAAA,UAAA,GAAjB,aACfpG,EAAMD,EAAOC,IAEnBsG,IAAMC,IAAN,6EAAAnC,OAAuFpE,EAAvF,UAAAoE,OAAmGvC,EAAnG,0EACG2E,KAAK,SAAAC,GACJlG,EAAKC,SAAS,CACZqD,OAAQ4C,EAAS1C,KAAK2C,OAAOC,MAC7BtB,QAAQ,MAGXuB,MAAM,SAAAC,GACLC,QAAQC,IAAI,0BAA2BF,QAK7ClF,WAAa,SAACrB,EAAG0G,EAAUlB,GACzB,IAAIL,EAAI,WAAArB,OAAc0B,GACtBvF,EAAKC,SAAS,CACZ6E,QAAQ,EACRS,OAAQA,EACRI,KAAMc,IAER1G,EAAE2G,iBAEFD,EAASE,KAAKzB,GAEF,aAATA,GACDlF,EAAKC,SAAS,CAAE6E,QAAQ,IAE1B/E,EAAE6G,cAAcC,WAIlBpE,YAAc,SAAC1C,GACbC,EAAKC,SAAS,CAAE6E,QAAQ,IACxB,IAAI3E,EAAQJ,EAAEG,OAAO4G,UACrB9G,EAAK4F,aAAazF,uFA3ElB,IAAMmB,EAAOT,KAAKjB,MAAM0B,KAEpB4B,EAAO6D,OAAOC,SAAS9D,KAEvB+D,EAAY/D,EAAKgE,MAAM,KAAKC,MAE5BC,EAAO9F,EAAK+F,OAAO,SAAA7C,GAAG,OAAItB,EAAKoE,QAAQ9C,GAAO,IAG/CtB,EAAKqE,SAAS,aAA6B,KAAdN,GAC9BpG,KAAKZ,SAAS,CAAE6E,QAAQ,IAGvB5B,EAAKqE,SAAS,YACf1G,KAAK+E,aAAaqB,GAGX/D,EAAKoE,QAAQF,GAAQ,IAAMlE,EAAKqE,SAAS,UAChD1G,KAAK+E,aAAawB,GAGW,IAAvBlE,EAAKoE,QAAQF,IAAgBlE,EAAKqE,SAAS,WACjD1G,KAAK+E,0DAMU4B,EAAWC,GAEzB5G,KAAKjB,MAAM2F,SAAWkC,EAAUlC,QACjC1E,KAAK+E,aAAa/E,KAAKjB,MAAM2F,yCAgD/B,OACEzE,EAAAC,EAAAC,cAAC0G,EAAD,CAAWjF,YAAa5B,KAAK4B,YAClBrB,WAAYP,KAAKO,WACjB0D,OAAQjE,KAAKjB,MAAMkF,OACnBtB,KAAM3C,KAAKjB,MAAM0D,OACjBiC,OAAQ1E,KAAKjB,MAAM2F,gBAhGlBlD,mBCOEsF,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASvC,MACvB,2DCVNwC,IAAS1C,OACPrE,EAAAC,EAAAC,cAAC8G,EAAD,MACAxH,SAASyH,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,KAAK,SAAAkC,GACjCA,EAAaC","file":"static/js/main.6a4f0aa8.chunk.js","sourcesContent":["const apiKey = {\r\n  key: '158307fe2b19d9a6d20625f3c739040d',\r\n  secret: '3af4ebfaef6afc1a'\r\n}\r\n\r\nexport default apiKey;\r\n","import React, { Component } from 'react';\r\nimport { withRouter } from 'react-router-dom';\r\n\r\n\r\nclass Form extends Component {\r\n\r\n  state = {\r\n    formText: ''\r\n  }\r\n\r\n  // If the form field gets written in, this method will update the state.\r\n  onTextUpdate = e => {\r\n    this.setState({ formText: e.target.value });\r\n  }\r\n\r\n  // Pulse effect gets added to the search button on click or when enter is pressed.\r\n  pulseEffect = () => {\r\n    const button = document.querySelector('.search-button');\r\n    button.classList.add('pulse');\r\n    setTimeout(() => { button.classList.remove('pulse'); }, 500);\r\n  }\r\n\r\n  // When form is submitted, formSubmit will get fired and pass three arguments to the App component.\r\n  render() {\r\n    return (\r\n      <form className=\"search-form\"\r\n               onSubmit={e => this.props.formSubmit(e, this.props.history, this.tags.value)} >\r\n        <input type=\"search\"\r\n               name=\"search\"\r\n               ref={(input) => this.tags = input}\r\n               placeholder=\"Search\"\r\n               autoComplete=\"off\"\r\n               onChange={this.onTextUpdate} />\r\n        <button type=\"submit\" className=\"search-button\" onClick={this.pulseEffect} >\r\n\r\n          {/* Search Icon */}\r\n          <svg className=\"sIcon\" fill=\"#84b198\" height=\"24\" viewBox=\"0 0 23 23\" width=\"24\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path d=\"M15.5 14h-.79l-.28-.27C15.41 12.59 16 11.11 16 9.5 16 5.91 13.09 3 9.5 3S3 5.91 3 9.5 5.91 16 9.5 16c1.61 0 3.09-.59 4.23-1.57l.27.28v.79l5 4.99L20.49 19l-4.99-5zm-6 0C7.01 14 5 11.99 5 9.5S7.01 5 9.5 5 14 7.01 14 9.5 11.99 14 9.5 14z\"/>\r\n            <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\r\n          </svg>\r\n\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withRouter(Form);\r\n","import React from 'react';\r\nimport { withRouter, NavLink } from 'react-router-dom';\r\n\r\nconst Navigation = (props) => {\r\n\r\n    return (\r\n      <nav className=\"main-nav\">\r\n        <ul>\r\n          <li><NavLink className=\"btn\" to=\"/lighthouse\" onClick={(e) => props.handleClick(e)}>lighthouse</NavLink></li>\r\n          <li><NavLink className=\"btn\" to=\"/sunrise\" onClick={(e) => props.handleClick(e)}>sunrise</NavLink></li>\r\n          <li><NavLink className=\"btn\" to=\"/mountains\" onClick={(e) => props.handleClick(e)}>mountains</NavLink></li>\r\n        </ul>\r\n      </nav>\r\n    );\r\n}\r\n\r\nexport default withRouter(Navigation);\r\n","import React from 'react';\r\nimport Form from './Form';\r\nimport Navigation from './Navigation';\r\n\r\n\r\nconst Header = (props) => {\r\n  return (\r\n    <header>\r\n\r\n      <Form formSubmit={props.formSubmit} />\r\n\r\n      <Navigation handleClick={props.handleClick} />\r\n\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\n\r\nconst Image = (props) => {\r\n  return(\r\n    <li>\r\n      <img src={props.url} alt={props.title} />\r\n      <div className=\"img-overlay\">\r\n        <p>{props.title}</p>\r\n        <a href={props.url} target=\"_blank\" rel=\"noopener noreferrer\" className=\"btn-hp\"><i className=\"fas fa-home\"></i></a>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default Image;\r\n","import React from 'react';\r\n\r\nconst NotFound = (props) => {\r\n  return (\r\n    <li className=\"not-found\">\r\n      <h3>\r\n        No Results Found\r\n      </h3>\r\n      <p>\r\n        That search did not return any results, please enter another tag or click one of the links.\r\n      </p>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default NotFound;\r\n","import React from 'react';\r\nimport Image from './Image';\r\nimport NotFound from './NotFound';\r\n\r\nconst List = (props) => {\r\n\r\n  // Save fetch data into a variable.\r\n  const apiData = props.data;\r\n  let images;\r\n  // If handleSearch returns any data, display the images otherwise an error message is displayed on the page.\r\n  if (apiData.length > 0) {\r\n    images = apiData.map( img =>\r\n      <Image url={`https://farm${img.farm}.staticflickr.com/${img.server}/${img.id}_${img.secret}_b.jpg`}\r\n             key={img.id}\r\n             title={img.title}\r\n              />\r\n    );\r\n  } else {\r\n    images = <NotFound />\r\n  }\r\n\r\n  return(\r\n    <ul>\r\n      {images}\r\n    </ul>\r\n  );\r\n}\r\n\r\nexport default List;\r\n","import React from 'react';\r\nimport List from './List';\r\n\r\nconst Gallery = (props) => {\r\n\r\n  const style = {\r\n    hide: { display: \"none\" }\r\n  }\r\n  let images = props.data.length;\r\n  return (\r\n    <div className=\"photo-container\">\r\n      {\r\n      // If no data is returned from the fetch call hide h2 element.\r\n      (images === 0)\r\n        ? <h2 style={style.hide}>{props.title}</h2>\r\n        : <h2>{props.title}</h2>\r\n      }\r\n      <List data={props.data} />\r\n\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Gallery;\r\n","import React from 'react';\r\n\r\nimport Gallery from './Gallery';\r\n\r\nconst Search = (props) => {\r\n\r\n    return(\r\n      <div>\r\n        <Gallery data={props.data} title={props.tag} />\r\n      </div>\r\n\r\n    );\r\n}\r\n\r\nexport default Search;\r\n","import React from 'react';\r\n\r\nconst NotAvailable = (props) => {\r\n  return(\r\n    <div className=\"main-content not-available\">\r\n      <i className=\"fas fa-exclamation-triangle\"></i>\r\n      <h3>Page Not Available</h3>\r\n      <p>Search for something or click one of the link's.</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default NotAvailable;\r\n","import React from 'react';\r\nimport { HashRouter,\r\n         Route,\r\n         Switch\r\n} from 'react-router-dom';\r\n\r\nimport Header from './Header';\r\nimport Gallery from './Gallery';\r\nimport Search from './Search';\r\nimport NotAvailable from './NotAvailable';\r\n\r\nconst Container = (props) => {\r\n\r\n    return(\r\n\r\n      <HashRouter basename='/'>\r\n        <div className=\"container\">\r\n\r\n          <Header formSubmit={props.formSubmit}\r\n                  handleClick={props.handleClick}\r\n            />\r\n\r\n          {/* Loader gets activated if no content is on the page. */}\r\n          {\r\n          (props.loader)\r\n          ? <div className=\"loading\"><p className=\"loadtext\">Loading..</p></div>\r\n          :\r\n          <Switch>\r\n            {/* Routes */}\r\n            <Route exact path=\"/\" render={() => <Gallery data={props.data} title=\"Lighthouse\" />} />\r\n\r\n            <Route path=\"/lighthouse\" render={() => <Gallery data={props.data} title=\"Lighthouse\" />} />\r\n\r\n            <Route path=\"/sunrise\" render={() => <Gallery data={props.data} title=\"Sunrise\" />} />\r\n\r\n            <Route path=\"/mountains\" render={() => <Gallery data={props.data} title=\"Mountains\" />} />\r\n\r\n            <Route exact path={`/search/:search`} render={({ match }) =>\r\n              <Search\r\n                data={props.data}\r\n                title={props.search}\r\n                tag={match.params.search}\r\n              />} />\r\n\r\n            <Route component={NotAvailable} />\r\n          </Switch>\r\n          }\r\n        </div>\r\n      </HashRouter>\r\n\r\n    );\r\n}\r\n\r\nexport default Container;\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport apiKey from '../config.js';\r\nimport Container from './Container';\r\n\r\nclass App extends Component {\r\n\r\n    state = {\r\n      images: [],\r\n      tags: ['lighthouse', 'sunrise', 'mountains', ''],\r\n      loader: true,\r\n      hist: null,\r\n      search: null\r\n    };\r\n\r\n  componentDidMount() {\r\n    // Get tags array from the state.\r\n    const tags = this.state.tags;\r\n    // Get the URL.\r\n    let href = window.location.href;\r\n    // Get the last word out of the URL string.\r\n    let searchTag = href.split(\"/\").pop();\r\n    // Filter through the tags array and check if the tag is in the URL string.\r\n    let word = tags.filter(tag => href.indexOf(tag) > 0);\r\n\r\n    // If the URL has the search route without a search tag, prevent the loader.\r\n    if(href.includes('/search/') && searchTag === \"\") {\r\n      this.setState({ loader: false });\r\n    }\r\n    // If URL has the search route, fetch data with the search tag (searchTag).\r\n    if(href.includes('/search/')) {\r\n      this.handleSearch(searchTag);\r\n    }\r\n    // If the filter array method matches the tags array, search for that tag.\r\n    else if (href.indexOf(word) > 0 && !href.includes('search')) {\r\n      this.handleSearch(word);\r\n    }\r\n    // If it is the home route search for the handleSearch argument (Lighthouse).\r\n    else if(href.indexOf(word) === 0 && !href.includes('search')) {\r\n      this.handleSearch();\r\n    }\r\n  }\r\n\r\n// When the search form is submitted, componentDidUpdate will listen for search word changes.\r\n// If there's a new search value, new data is fetched.\r\n  componentDidUpdate(prevProps, prevState) {\r\n\r\n    if(this.state.search !== prevState.search) {\r\n      this.handleSearch(this.state.search);\r\n    }\r\n  }\r\n\r\n// If the search form is submitted or one of the NavLinks gets clicked handleSearch will fetch new data.\r\n// When the app initially loads, handleSearch will fetch for 'Lighthouse'.\r\n// Fetch with axios. If something doesn't work, catch will throw an error.\r\n  handleSearch = (tags = 'Lighthouse') => {\r\n    const key = apiKey.key;\r\n\r\n    axios.get(`https://api.flickr.com/services/rest/?method=flickr.photos.search&api_key=${key}&tags=${tags}&content_type=1&media=photos&per_page=16&format=json&nojsoncallback=1`)\r\n      .then(response => {\r\n        this.setState({\r\n          images: response.data.photos.photo,\r\n          loader: false\r\n        });\r\n    })\r\n      .catch(error => {\r\n        console.log('Error fetching the data', error);\r\n    });\r\n  }\r\n\r\n// If the form is submitted, router history(histData) and search tag (search argument) is passed up from the Form component to the App.\r\n  formSubmit = (e, histData, search) => {\r\n    let path = `/search/${search}`;\r\n    this.setState({\r\n      loader: true,\r\n      search: search,\r\n      hist: histData\r\n     });\r\n    e.preventDefault();\r\n    // Push a new URL with router history push method.\r\n    histData.push(path);\r\n    // If the URL only got search in it, without a tag, disable the loader.\r\n    if(path === '/search/') {\r\n      this.setState({ loader: false });\r\n    }\r\n    e.currentTarget.reset();\r\n  }\r\n\r\n// Listens for navigation menu clicks. Get the text value from the link and pass it to the search function.\r\n  handleClick = (e) => {\r\n    this.setState({ loader: true });\r\n    let value = e.target.innerHTML;\r\n    this.handleSearch(value);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Container handleClick={this.handleClick}\r\n                 formSubmit={this.formSubmit}\r\n                 loader={this.state.loader}\r\n                 data={this.state.images}\r\n                 search={this.state.search}\r\n       />\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\r\nimport App from './Components/App';\r\n\nimport './project.css';\n\nimport * as serviceWorker from './serviceWorker';\r\n\nReactDOM.render(\r\n  <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}